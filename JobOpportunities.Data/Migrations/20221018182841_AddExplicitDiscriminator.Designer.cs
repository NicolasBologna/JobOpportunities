// <auto-generated />
using System;
using JobOpportunities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobOpportunities.Data.Migrations
{
    [DbContext(typeof(JobOpportunitiesContext))]
    [Migration("20221018182841_AddExplicitDiscriminator")]
    partial class AddExplicitDiscriminator
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CandidateJobOffer", b =>
                {
                    b.Property<Guid>("CandidatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobOfferApplicationsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidatesId", "JobOfferApplicationsId");

                    b.HasIndex("JobOfferApplicationsId");

                    b.ToTable("CandidateJobOffer", (string)null);

                    b.HasData(
                        new
                        {
                            CandidatesId = new Guid("f47890b6-a3ce-4057-94a9-af862d2c01de"),
                            JobOfferApplicationsId = new Guid("5cfe1935-3a8e-418a-a260-38d0551d5027")
                        },
                        new
                        {
                            CandidatesId = new Guid("f29d1608-f324-4432-8e44-5ee320909b9d"),
                            JobOfferApplicationsId = new Guid("5cfe1935-3a8e-418a-a260-38d0551d5027")
                        });
                });

            modelBuilder.Entity("CandidateSkill", b =>
                {
                    b.Property<Guid>("CandidatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidatesId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("CandidateSkill", (string)null);

                    b.HasData(
                        new
                        {
                            CandidatesId = new Guid("f47890b6-a3ce-4057-94a9-af862d2c01de"),
                            SkillsId = new Guid("70068d37-d9e3-48d9-a390-e85a11f2f31f")
                        },
                        new
                        {
                            CandidatesId = new Guid("f47890b6-a3ce-4057-94a9-af862d2c01de"),
                            SkillsId = new Guid("2f8ce28b-8641-426e-98ba-eef98cc9f8a0")
                        },
                        new
                        {
                            CandidatesId = new Guid("f29d1608-f324-4432-8e44-5ee320909b9d"),
                            SkillsId = new Guid("2f8ce28b-8641-426e-98ba-eef98cc9f8a0")
                        });
                });

            modelBuilder.Entity("JobOfferSkill", b =>
                {
                    b.Property<Guid>("JobOffersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequiredSkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobOffersId", "RequiredSkillsId");

                    b.HasIndex("RequiredSkillsId");

                    b.ToTable("JobOfferSkill", (string)null);

                    b.HasData(
                        new
                        {
                            JobOffersId = new Guid("5cfe1935-3a8e-418a-a260-38d0551d5027"),
                            RequiredSkillsId = new Guid("70068d37-d9e3-48d9-a390-e85a11f2f31f")
                        },
                        new
                        {
                            JobOffersId = new Guid("5cfe1935-3a8e-418a-a260-38d0551d5027"),
                            RequiredSkillsId = new Guid("2f8ce28b-8641-426e-98ba-eef98cc9f8a0")
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("JobOpportunities.Domain.JobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedByAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobOffers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("JobOffer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cfe1935-3a8e-418a-a260-38d0551d5027"),
                            CompanyId = new Guid("1b1d13dd-afb4-474f-a60a-bf6ab3474898"),
                            Description = "Una posición para pasarla bien",
                            Title = ".NET FullStack FullTime",
                            ValidUntil = new DateTime(2023, 1, 16, 15, 28, 41, 149, DateTimeKind.Local).AddTicks(5360)
                        },
                        new
                        {
                            Id = new Guid("ff414898-e070-4c52-be2e-04cae7a1af1a"),
                            CompanyId = new Guid("1b1d13dd-afb4-474f-a60a-bf6ab3474898"),
                            Description = "Posición ma o meno",
                            Title = "Node Backend",
                            ValidUntil = new DateTime(2023, 1, 16, 15, 28, 41, 149, DateTimeKind.Local).AddTicks(5391)
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.Knowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedByAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Knowleadges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b20501eb-5f36-4ed4-96ac-cf32817dce06"),
                            Description = "Versión 6 + todo el ecosistema",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = new Guid("3f374542-7711-4581-80c3-6f1a0a7c1105"),
                            Description = "Versión 13",
                            Title = "Angular"
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KnowleadgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedByAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SkillLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KnowleadgeId");

                    b.HasIndex("SkillLevelId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70068d37-d9e3-48d9-a390-e85a11f2f31f"),
                            KnowleadgeId = new Guid("b20501eb-5f36-4ed4-96ac-cf32817dce06"),
                            SkillLevelId = new Guid("78867f5c-44fb-470d-9946-3da97e6ae2a7")
                        },
                        new
                        {
                            Id = new Guid("2f8ce28b-8641-426e-98ba-eef98cc9f8a0"),
                            KnowleadgeId = new Guid("3f374542-7711-4581-80c3-6f1a0a7c1105"),
                            SkillLevelId = new Guid("248b45b9-bf4a-4815-844d-ec02daaeb638")
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.SkillLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedByAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78867f5c-44fb-470d-9946-3da97e6ae2a7"),
                            Description = "Lower skills required",
                            Name = "Intern"
                        },
                        new
                        {
                            Id = new Guid("a9be5506-3f5e-403a-b113-73fba517f3c6"),
                            Description = "Lower skills required, but can finish some tasks",
                            Name = "Junior"
                        },
                        new
                        {
                            Id = new Guid("248b45b9-bf4a-4815-844d-ec02daaeb638"),
                            Description = "higher skills required, but less responsabilities",
                            Name = "Semi-Senior"
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.Users.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedByAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RefreshTokenValue")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fab4fac1-c546-41de-aebc-a14da6895711"),
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c7b013f0-5201-4317-abd8-c211f91b7330"),
                            ConcurrencyStamp = "2",
                            Name = "Candidate",
                            NormalizedName = "CANDIDATE"
                        },
                        new
                        {
                            Id = new Guid("30680485-8d48-4a7a-8f2b-8afdb1fc526c"),
                            ConcurrencyStamp = "3",
                            Name = "CompanyAgent",
                            NormalizedName = "COMPANYAGENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1b1d13dd-afb4-474f-a60a-bf6ab3474898"),
                            RoleId = new Guid("30680485-8d48-4a7a-8f2b-8afdb1fc526c")
                        },
                        new
                        {
                            UserId = new Guid("f47890b6-a3ce-4057-94a9-af862d2c01de"),
                            RoleId = new Guid("c7b013f0-5201-4317-abd8-c211f91b7330")
                        },
                        new
                        {
                            UserId = new Guid("f29d1608-f324-4432-8e44-5ee320909b9d"),
                            RoleId = new Guid("c7b013f0-5201-4317-abd8-c211f91b7330")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobOpportunities.Domain.Candidate", b =>
                {
                    b.HasBaseType("JobOpportunities.Domain.ApplicationUser");

                    b.Property<string>("Cuil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Curriculum")
                        .HasColumnType("varbinary(max)");

                    b.HasDiscriminator().HasValue("Candidate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47890b6-a3ce-4057-94a9-af862d2c01de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3377bfe-343c-48b7-9a17-f10dad9bb158",
                            Email = "pepito@endava.com",
                            EmailConfirmed = false,
                            FirstName = "Pepito",
                            LastName = "Juarez",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOVfpQLCJT9P2a0nKrV0WFk2ru+YIJAZd4fNMuaHRAEHf/hLo4gyeneTMiuRuqNGBA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "PepitoJuarez",
                            Cuil = "20-45323443-3"
                        },
                        new
                        {
                            Id = new Guid("f29d1608-f324-4432-8e44-5ee320909b9d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4b7d925-cbc1-4d8f-835c-d64f9c52c61a",
                            Email = "marcelo@endava.com",
                            EmailConfirmed = false,
                            FirstName = "Marcelo",
                            LastName = "Reynoso",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGQGBHgeViCZ8y9/a2Tg6UUfRgWflA9G4qYePuPUa4K7a+Lx63YqNiZHyB+5Rj6O+g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MarceloReynoso",
                            Cuil = "20-65723443-3"
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.FullTimeJob", b =>
                {
                    b.HasBaseType("JobOpportunities.Domain.JobOffer");

                    b.HasDiscriminator().HasValue("FullTimeJob");
                });

            modelBuilder.Entity("JobOpportunities.Domain.Intership", b =>
                {
                    b.HasBaseType("JobOpportunities.Domain.JobOffer");

                    b.HasDiscriminator().HasValue("Intership");
                });

            modelBuilder.Entity("JobOpportunities.Domain.Users.Admin", b =>
                {
                    b.HasBaseType("JobOpportunities.Domain.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("JobOpportunities.Domain.Users.CompanyAgent", b =>
                {
                    b.HasBaseType("JobOpportunities.Domain.ApplicationUser");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CompanyAgent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b1d13dd-afb4-474f-a60a-bf6ab3474898"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d67c2bdf-4705-48b2-800c-c8fe114b0a81",
                            EmailConfirmed = false,
                            FirstName = "José María",
                            LastName = "endava",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEHJuZO1wKKH04r/puhGwNgnLl91vemlXqqC2P6ooNVPxWJk2i5tB/u+EgyOoqP4S4Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Cuit = "34-523445345-4"
                        });
                });

            modelBuilder.Entity("CandidateJobOffer", b =>
                {
                    b.HasOne("JobOpportunities.Domain.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOpportunities.Domain.JobOffer", null)
                        .WithMany()
                        .HasForeignKey("JobOfferApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CandidateSkill", b =>
                {
                    b.HasOne("JobOpportunities.Domain.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOpportunities.Domain.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOfferSkill", b =>
                {
                    b.HasOne("JobOpportunities.Domain.JobOffer", null)
                        .WithMany()
                        .HasForeignKey("JobOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOpportunities.Domain.Skill", null)
                        .WithMany()
                        .HasForeignKey("RequiredSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOpportunities.Domain.JobOffer", b =>
                {
                    b.HasOne("JobOpportunities.Domain.Users.CompanyAgent", "Company")
                        .WithMany("Offers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobOpportunities.Domain.Skill", b =>
                {
                    b.HasOne("JobOpportunities.Domain.Knowledge", "Knowleadge")
                        .WithMany()
                        .HasForeignKey("KnowleadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOpportunities.Domain.SkillLevel", "SkillLevel")
                        .WithMany()
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowleadge");

                    b.Navigation("SkillLevel");
                });

            modelBuilder.Entity("JobOpportunities.Domain.Users.RefreshToken", b =>
                {
                    b.HasOne("JobOpportunities.Domain.ApplicationUser", "User")
                        .WithMany("AccessTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("JobOpportunities.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("JobOpportunities.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOpportunities.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("JobOpportunities.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOpportunities.Domain.ApplicationUser", b =>
                {
                    b.Navigation("AccessTokens");
                });

            modelBuilder.Entity("JobOpportunities.Domain.Users.CompanyAgent", b =>
                {
                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
