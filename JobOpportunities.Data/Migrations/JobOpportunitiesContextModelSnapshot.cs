// <auto-generated />
using System;
using JobOpportunities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobOpportunities.Data.Migrations
{
    [DbContext(typeof(JobOpportunitiesContext))]
    partial class JobOpportunitiesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CandidateJobOffer", b =>
                {
                    b.Property<Guid>("CandidatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OffersAppliedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidatesId", "OffersAppliedId");

                    b.HasIndex("OffersAppliedId");

                    b.ToTable("CandidateJobOffer");
                });

            modelBuilder.Entity("CandidateSkill", b =>
                {
                    b.Property<Guid>("CandidatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidatesId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("CandidateSkill", (string)null);

                    b.HasData(
                        new
                        {
                            CandidatesId = new Guid("f47890b6-a3ce-4057-94a9-af862d2c01de"),
                            SkillsId = new Guid("70068d37-d9e3-48d9-a390-e85a11f2f31f")
                        },
                        new
                        {
                            CandidatesId = new Guid("f47890b6-a3ce-4057-94a9-af862d2c01de"),
                            SkillsId = new Guid("2f8ce28b-8641-426e-98ba-eef98cc9f8a0")
                        },
                        new
                        {
                            CandidatesId = new Guid("f29d1608-f324-4432-8e44-5ee320909b9d"),
                            SkillsId = new Guid("2f8ce28b-8641-426e-98ba-eef98cc9f8a0")
                        });
                });

            modelBuilder.Entity("JobOfferSkill", b =>
                {
                    b.Property<Guid>("JobOffersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequiredSkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobOffersId", "RequiredSkillsId");

                    b.HasIndex("RequiredSkillsId");

                    b.ToTable("JobOfferSkill", (string)null);

                    b.HasData(
                        new
                        {
                            JobOffersId = new Guid("5cfe1935-3a8e-418a-a260-38d0551d5027"),
                            RequiredSkillsId = new Guid("70068d37-d9e3-48d9-a390-e85a11f2f31f")
                        },
                        new
                        {
                            JobOffersId = new Guid("5cfe1935-3a8e-418a-a260-38d0551d5027"),
                            RequiredSkillsId = new Guid("2f8ce28b-8641-426e-98ba-eef98cc9f8a0")
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47890b6-a3ce-4057-94a9-af862d2c01de"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(2678),
                            Email = "pepito@endava.com",
                            Name = "Pepito Juarez",
                            Password = "123456UltraSecure"
                        },
                        new
                        {
                            Id = new Guid("f29d1608-f324-4432-8e44-5ee320909b9d"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(2692),
                            Email = "marcelo@endava.com",
                            Name = "Marcelo Reynoso",
                            Password = "320909b967uythgfd@434$%&"
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ee1f9a2-201a-4351-abc1-c056932a1165"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1901),
                            Email = "company@endava.com",
                            Name = "Endava"
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.JobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobOffers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("JobOffer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cfe1935-3a8e-418a-a260-38d0551d5027"),
                            CompanyId = new Guid("9ee1f9a2-201a-4351-abc1-c056932a1165"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1921),
                            Description = "Una posición para pasarla bien",
                            Title = ".NET FullStack FullTime",
                            ValidUntil = new DateTime(2022, 11, 2, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1923)
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.Knowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Knowleadges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b20501eb-5f36-4ed4-96ac-cf32817dce06"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1838),
                            Description = "Versión 6 + todo el ecosistema",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = new Guid("3f374542-7711-4581-80c3-6f1a0a7c1105"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1851),
                            Description = "Versión 13",
                            Title = "Angular"
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KnowleadgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SkillLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KnowleadgeId");

                    b.HasIndex("SkillLevelId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70068d37-d9e3-48d9-a390-e85a11f2f31f"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1872),
                            KnowleadgeId = new Guid("b20501eb-5f36-4ed4-96ac-cf32817dce06"),
                            SkillLevelId = new Guid("78867f5c-44fb-470d-9946-3da97e6ae2a7")
                        },
                        new
                        {
                            Id = new Guid("2f8ce28b-8641-426e-98ba-eef98cc9f8a0"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1882),
                            KnowleadgeId = new Guid("3f374542-7711-4581-80c3-6f1a0a7c1105"),
                            SkillLevelId = new Guid("248b45b9-bf4a-4815-844d-ec02daaeb638")
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.SkillLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78867f5c-44fb-470d-9946-3da97e6ae2a7"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1784),
                            Description = "Lower skills required",
                            Name = "Intern"
                        },
                        new
                        {
                            Id = new Guid("a9be5506-3f5e-403a-b113-73fba517f3c6"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1810),
                            Description = "Lower skills required, but can finish some tasks",
                            Name = "Junior"
                        },
                        new
                        {
                            Id = new Guid("248b45b9-bf4a-4815-844d-ec02daaeb638"),
                            CreationDate = new DateTime(2022, 8, 4, 16, 31, 31, 903, DateTimeKind.Local).AddTicks(1818),
                            Description = "higher skills required, but less responsabilities",
                            Name = "Semi-Senior"
                        });
                });

            modelBuilder.Entity("JobOpportunities.Domain.FullTimeJob", b =>
                {
                    b.HasBaseType("JobOpportunities.Domain.JobOffer");

                    b.HasDiscriminator().HasValue("FullTimeJob");
                });

            modelBuilder.Entity("JobOpportunities.Domain.Intership", b =>
                {
                    b.HasBaseType("JobOpportunities.Domain.JobOffer");

                    b.HasDiscriminator().HasValue("Intership");
                });

            modelBuilder.Entity("CandidateJobOffer", b =>
                {
                    b.HasOne("JobOpportunities.Domain.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOpportunities.Domain.JobOffer", null)
                        .WithMany()
                        .HasForeignKey("OffersAppliedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CandidateSkill", b =>
                {
                    b.HasOne("JobOpportunities.Domain.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOpportunities.Domain.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOfferSkill", b =>
                {
                    b.HasOne("JobOpportunities.Domain.JobOffer", null)
                        .WithMany()
                        .HasForeignKey("JobOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOpportunities.Domain.Skill", null)
                        .WithMany()
                        .HasForeignKey("RequiredSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOpportunities.Domain.JobOffer", b =>
                {
                    b.HasOne("JobOpportunities.Domain.Company", "Company")
                        .WithMany("Offers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobOpportunities.Domain.Skill", b =>
                {
                    b.HasOne("JobOpportunities.Domain.Knowledge", "Knowleadge")
                        .WithMany()
                        .HasForeignKey("KnowleadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOpportunities.Domain.SkillLevel", "SkillLevel")
                        .WithMany()
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowleadge");

                    b.Navigation("SkillLevel");
                });

            modelBuilder.Entity("JobOpportunities.Domain.Company", b =>
                {
                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
